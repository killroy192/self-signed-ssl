#!/bin/ash

# Directories
cur=$(pwd)
tmp=$(mktemp -d)
scriptName=$(basename "$0")

# Certificate Variables
OUTPATH="./data"
VERBOSE=${VERBOSE:=1}
DURATION=${DURATION:=1095} # 3 years
C=$COUNTRY
ST=$STATE
L=$LOCALITY
O=$ORGANIZATION
OU=$UNIT
CN=${COMMON_NAME:=localhost}
IP_V6=${IP_V6:=::1}
IP_V4=${IP_V4:=127.0.0.1}
emailAddress=$EMAIL_ADDRESS
SIZE=${SIZE:=2048}

safeExit() {
  if [ -d "$tmp" ]; then
    if [ $VERBOSE -eq 1 ]; then
      echo "Removing temporary directory '${tmp}'"
    fi
    rm -rf "$tmp"
  fi

  trap - INT TERM EXIT
  exit
}

# Help Screen
help() {
  echo -n "${scriptName} [OPTIONS] -c=US --state=California

Generate self-signed TLS certificate using OpenSSL

 Options:
  -c|--country         Country Name (2 letter code)
  -s|--state           State or Province Name (full name)
  -l|--locality        Locality Name (eg, city)
  -o|--organization    Organization Name (eg, company)
  -u|--unit            Organizational Unit Name (eg, section)
  -n|--common-name     Common Name (e.g. server FQDN or YOUR name)
  -e|--email           Email Address
  -p|--path            Path to output generated keys
  -d|--duration        Validity duration of the certificate (in days)
  -h|--help            Display this help and exit
  -v|--verbose         Verbose output
"
}

# Test output path is valid
testPath() {
  if [ ! -d $OUTPATH ]; then
    echo "The specified directory \"${OUTPATH}\" does not exist"
    exit 1
  fi
}

# Process Arguments
if [ "$1" == "help" ]; then
  help;
  exit 0;
fi

# Prompt for variables that were not provided in arguments
checkVariables() {
  # Country
  if [ -z "$C" ]; then
    echo -n "Country Name (2 letter code) [AU]:"
    read -r C
  fi

  # State
  if [ -z "$ST" ]; then
    echo -n "State or Province Name (full name) [Some-State]:"
    read -r ST
  fi

  # Locality
  if [ -z "$L" ]; then
    echo -n "Locality Name (eg, city) []:"
    read -r L
  fi

  # Organization
  if [ -z "$O" ]; then
    echo -n "Organization Name (eg, company) [Internet Widgits Pty Ltd]:"
    read -r O
  fi

  # Organizational Unit
  if [ -z "$OU" ]; then
    echo -n "Organizational Unit Name (eg, section) []:"
    read -r OU
  fi

  # Common Name
  if [ -z "$CN" ]; then
    echo -n "Common Name (e.g. server FQDN or YOUR name) []:"
    read -r CN
  fi

  # Email Address
  if [ -z "$emailAddress" ]; then
    echo -n "Email Address []:"
    read -r emailAddress
  fi
}

# Show variable values
showVals() {
  echo "Country: ${C}";
  echo "State: ${ST}";
  echo "Locality: ${L}";
  echo "Organization: ${O}";
  echo "Organization Unit: ${OU}";
  echo "Common Name: ${CN}";
  echo "Email: ${emailAddress}";
  echo "Output Path: ${OUTPATH}";
  echo "Certificate Duration (Days): ${DURATION}";
  echo "Verbose: ${VERBOSE}";
}

# Init
init() {
  cd "$tmp" || exit
  pwd
}

# Cleanup
cleanup() {
  echo "Cleaning up"
  cd "$cur" || exit
  rm -rf "$tmp"
}

buildCsrCnf() {
cat << EOF > "${tmp}/tmp.csr.cnf"
[req]
default_bits = ${SIZE}
prompt = no
default_md = sha256
distinguished_name = dn
[dn]
C=${C}
ST=${ST}
L=${L}
O=${O}
OU=${OU}
CN=${CN}
emailAddress=${emailAddress}
[req_ext]
subjectAltName = @alt_names
[alt_names]
DNS.1 = ${CN}
IP.1 = ${IP_V6}
IP.2 = ${IP_V4}
EOF
}

# Build TLS Certificate
build() {
  # Santizie domain name for file name
  FILENAME=${CN/\*\./}
  # Generate CA key & crt
  openssl genrsa -out "${tmp}/tmp.key" ${SIZE}
  openssl req -x509 -new -nodes -key "${tmp}/tmp.key" -sha256 -days "${DURATION}" -out "${OUTPATH}/${FILENAME}_CA.cert" -subj "/C=${C}/ST=${ST}/L=${L}/O=${O}/OU=${OU}/CN=${CN}/emailAddress=${emailAddress}"

  openssl genrsa -out "${OUTPATH}/${FILENAME}.key" ${SIZE}

  # CSR Configuration
  buildCsrCnf

  # Server key
  openssl req -new -nodes -key "${OUTPATH}/${FILENAME}.key" -out "${OUTPATH}/${FILENAME}.csr" -config "${tmp}/tmp.csr.cnf"

  # Server certificate
  openssl x509 -req -in "${OUTPATH}/${FILENAME}.csr" -CA "${OUTPATH}/${FILENAME}_CA.cert" -CAkey "${tmp}/tmp.key" -CAcreateserial -out "${OUTPATH}/${FILENAME}.pem" -days 365 -sha256 -extfile "${tmp}/tmp.csr.cnf" -extensions req_ext

  # Verify your certificate is correct
  openssl x509 -in "${OUTPATH}/${FILENAME}.pem" -text -noout
}

checkVariables
build
# showVals
safeExit
